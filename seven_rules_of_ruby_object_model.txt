1. There is only one kind of object--be it a regular object or a module.
2. There is only one kind of module--be it a regular module, a class, an eigenclass, or a proxy class.
3. There is only one kind of method, and it lives in a module--most often in a class.
4. Every object, classes included, has its own "real class," be it a regular class or an eigenclass.
5. Every class has exactly one superclass, with the exception of BasicObject, which has none. This means you have a single ancestors chain from any class up to BasicObject.
6. The superclass of the eigenclass of an object is the object’s class. The superclass of the eigenclass of a class is the eigenclass of the class' superclass.
7. When you call a method, Ruby goes "right" in the receiver’s real class and then "up" the ancestors chain. That's all there is to know about the way Ruby finds methods.